
# Node class for Linked List
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# Stack class using Linked List
class Stack:
    def __init__(self):
        self.top = None

    # Push operation
    def push(self, item):
        new_node = Node(item)
        new_node.next = self.top
        self.top = new_node
        print(f"Pushed: {item}")

    # Pop operation
    def pop(self):
        if self.is_empty():
            print("Stack Underflow! Cannot pop from empty stack.")
            return None
        popped = self.top.data
        self.top = self.top.next
        return popped

    # Peek operation
    def peek(self):
        if self.is_empty():
            print("Stack is empty.")
            return None
        return self.top.data

    # Check if stack is empty
    def is_empty(self):
        return self.top is None

    # Display the stack
    def display(self):
        if self.is_empty():
            print("Stack is empty.")
            return
        current = self.top
        print("Stack (top to bottom):", end=" ")
        while current:
            print(current.data, end=" ")
            current = current.next
        print()

# Example Usage
s = Stack()
s.push(10)
s.push(20)
s.push(30)
s.display()
print("Top element is:", s.peek())
print("Popped element:", s.pop())
s.display()

